% Chapter 3, tutorial 3.2: "Statistical properties of simulated spike
% trains"

%% a)
El = -70e-3; % Volts
Vth = -50e-3;
Vrst = -80e-3;
exp_rng = 2e-3;
Gl = 10e-9; % Siemens
Cm = 100e-12; % Farads
a = 2e-9; % Siemens
b = 0; 
tau_sra = 150e-3; % seconds
Vmax = 0; % Cutoff voltage for spikes

dt = 0.01e-3; % seconds
simDur = 100; % s
tvec = 0:dt:simDur;

sigma = 50e-12; % Amp * s^0.5
Iapp = normrnd(0,sigma/sqrt(dt),size(tvec));
% Imag = 0.3e-9;
% Iapp = zeros(size(tvec)); 
% Iapp(round(0.5/dt):round(1.5/dt)) = Imag;

V = zeros(size(tvec));
V(1) = El;
Isra = zeros(size(tvec));
spikeTimes = [];

for i = 1:numel(tvec)-1

    if V(i) >= Vmax % Once voltage crosses Vmax, set it back to Vmax to avoid 
        % spikes that explode in magnitude.
        V(i) = Vmax;
        V(i+1) = Vrst; % Set next voltage back to reset value
        Isra(i+1) = Isra(i) + b;
        spikeTimes = [spikeTimes; tvec(i)];
    else
        dV = dt*(Gl*( El - V(i) + exp_rng*exp((V(i)-Vth)/exp_rng) ) - Isra(i) + Iapp(i))/Cm;
        V(i+1) = V(i) + dV;
        dIsra = dt*( a*(V(i) - El) - Isra(i) )/tau_sra;
        Isra(i+1) = Isra(i) + dIsra;
    end

end

ISIs = diff(spikeTimes);
FRs = 1./ISIs;


figure;
tl = tiledlayout(3,1);
xlabel(tl,"Time (s)")
title(tl,sprintf("AELIF b=%d",b))

nexttile
plot(tvec, V*1e3)
ylabel("Membrane Voltage (mV)")

nexttile
plot(tvec, Iapp*1e9)
ylabel("Applied Current (nA)")

nexttile
plot(tvec, Isra*1e9)
ylabel("Adaptation Current (nA)")

% nexttile
% plot(spikeTimes(2:end)', FRs, 'k.')
% ylabel("Frequency From ISI (Hz)")

figure;
histogram(ISIs,25)
xlabel("ISI (s)")
ylabel("Count")
title(sprintf("AELIF b=%d",b))

meanISI = mean(ISIs);
stdISI = std(ISIs);

coefVar = stdISI/meanISI

%% a) III

wdwSize = 100e-3; 
wdwEdges = tvec(1) : wdwSize : tvec(end);
numWdwSpks = zeros(1,numel(wdwEdges)-1); % To hold the number of spikes in each window

for e = 1:numel(wdwEdges)-1

    numSpikes = sum(spikeTimes >= wdwEdges(e) & spikeTimes < wdwEdges(e+1));
    numWdwSpks(e) = numSpikes;
end

fanoF = var(numWdwSpks)/mean(numWdwSpks)

%% a) IV

wdwSizeAr = linspace(10e-3,1,1000);
fanoVals = zeros(size(wdwSizeAr));

for w = 1:numel(wdwSizeAr)

    wdwEdges = tvec(1) : wdwSizeAr(w) : tvec(end);
    numWdwSpks = zeros(1,numel(wdwEdges)-1); % To hold the number of spikes in each window
    
    for e = 1:numel(wdwEdges)-1
    
        numSpikes = sum(spikeTimes >= wdwEdges(e) & spikeTimes < wdwEdges(e+1));
        numWdwSpks(e) = numSpikes;
    end
    
    fanoF = var(numWdwSpks)/mean(numWdwSpks);
    fanoVals(w) = fanoF;

end

figure
plot(wdwSizeAr*1e3, fanoVals)
title(sprintf("Fano Factors of a White Noise Spiketrain \n AELIF b=%d",b))
xlabel("Window Size (ms)")
ylabel("Fano Factor")


%% b)
El = -70e-3; % Volts
Vth = -50e-3;
Vrst = -80e-3;
exp_rng = 2e-3;
Gl = 10e-9; % Siemens
Cm = 100e-12; % Farads
a = 2e-9; % Siemens
b = 1e-9; % Amps 
tau_sra = 150e-3; % seconds
Vmax = 0; % Cutoff voltage for spikes

dt = 0.01e-3; % seconds
simDur = 100; % s
tvec = 0:dt:simDur;

sigma = 50e-12; % Amp * s^0.5
Iapp = normrnd(0,sigma/sqrt(dt),size(tvec));
% Imag = 0.3e-9;
% Iapp = zeros(size(tvec)); 
% Iapp(round(0.5/dt):round(1.5/dt)) = Imag;

V = zeros(size(tvec));
V(1) = El;
Isra = zeros(size(tvec));
spikeTimes = [];

for i = 1:numel(tvec)-1

    if V(i) >= Vmax % Once voltage crosses Vmax, set it back to Vmax to avoid 
        % spikes that explode in magnitude.
        V(i) = Vmax;
        V(i+1) = Vrst; % Set next voltage back to reset value
        Isra(i+1) = Isra(i) + b;
        spikeTimes = [spikeTimes; tvec(i)];
    else
        dV = dt*(Gl*( El - V(i) + exp_rng*exp((V(i)-Vth)/exp_rng) ) - Isra(i) + Iapp(i))/Cm;
        V(i+1) = V(i) + dV;
        dIsra = dt*( a*(V(i) - El) - Isra(i) )/tau_sra;
        Isra(i+1) = Isra(i) + dIsra;
    end

end

ISIs = diff(spikeTimes);
FRs = 1./ISIs;


figure;
tl = tiledlayout(3,1);
xlabel(tl,"Time (s)")
title(tl,sprintf("AELIF b=%d",b))

nexttile
plot(tvec, V*1e3)
ylabel("Membrane Voltage (mV)")

nexttile
plot(tvec, Iapp*1e9)
ylabel("Applied Current (nA)")

nexttile
plot(tvec, Isra*1e9)
ylabel("Adaptation Current (nA)")

% nexttile
% plot(spikeTimes(2:end)', FRs, 'k.')
% ylabel("Frequency From ISI (Hz)")

figure;
histogram(ISIs,25)
xlabel("ISI (s)")
ylabel("Count")
title(sprintf("AELIF b=%d",b))

meanISI = mean(ISIs);
stdISI = std(ISIs);

coefVar = stdISI/meanISI


% Fano factor graph
wdwSizeAr = linspace(10e-3,1,1000);
fanoVals = zeros(size(wdwSizeAr));

for w = 1:numel(wdwSizeAr)

    wdwEdges = tvec(1) : wdwSizeAr(w) : tvec(end);
    numWdwSpks = zeros(1,numel(wdwEdges)-1); % To hold the number of spikes in each window
    
    for e = 1:numel(wdwEdges)-1
    
        numSpikes = sum(spikeTimes >= wdwEdges(e) & spikeTimes < wdwEdges(e+1));
        numWdwSpks(e) = numSpikes;
    end
    
    fanoF = var(numWdwSpks)/mean(numWdwSpks);
    fanoVals(w) = fanoF;

end

figure
plot(wdwSizeAr*1e3, fanoVals)
title(sprintf("Fano Factors of a White Noise Spiketrain \n AELIF b=%d",b))
xlabel("Window Size (ms)")
ylabel("Fano Factor")


%% c) 

El = -70e-3; % Volts
Vth = -50e-3;
Vrst = -80e-3;
exp_rng = 2e-3;
Gl = 10e-9; % Siemens
Cm = 100e-12; % Farads
a = 2e-9; % Siemens
b = 0; % Amps 
tau_sra = 150e-3; % seconds
Vmax = 0; % Cutoff voltage for spikes

dt = 0.01e-3; % seconds
simDur = 100; % s
tvec = 0:dt:simDur;

sigma = 20e-12; % Amp * s^0.5
Imag = 0.2e-9; % baseline applied current
Iapp = Imag + normrnd(0,sigma/sqrt(dt),size(tvec));
% Iapp = zeros(size(tvec)); 
% Iapp(round(0.5/dt):round(1.5/dt)) = Imag;

V = zeros(size(tvec));
V(1) = El;
Isra = zeros(size(tvec));
spikeTimes = [];

for i = 1:numel(tvec)-1

    if V(i) >= Vmax % Once voltage crosses Vmax, set it back to Vmax to avoid 
        % spikes that explode in magnitude.
        V(i) = Vmax;
        V(i+1) = Vrst; % Set next voltage back to reset value
        Isra(i+1) = Isra(i) + b;
        spikeTimes = [spikeTimes; tvec(i)];
    else
        dV = dt*(Gl*( El - V(i) + exp_rng*exp((V(i)-Vth)/exp_rng) ) - Isra(i) + Iapp(i))/Cm;
        V(i+1) = V(i) + dV;
        dIsra = dt*( a*(V(i) - El) - Isra(i) )/tau_sra;
        Isra(i+1) = Isra(i) + dIsra;
    end

end

ISIs = diff(spikeTimes);
FRs = 1./ISIs;


figure;
tl = tiledlayout(3,1);
xlabel(tl,"Time (s)")
title(tl,sprintf("AELIF b=%.1d, sigma=%.1d, Imag=%.1d",b,sigma,Imag))

nexttile
plot(tvec, V*1e3)
ylabel("Membrane Voltage (mV)")

nexttile
plot(tvec, Iapp*1e9)
ylabel("Applied Current (nA)")

nexttile
plot(tvec, Isra*1e9)
ylabel("Adaptation Current (nA)")

% nexttile
% plot(spikeTimes(2:end)', FRs, 'k.')
% ylabel("Frequency From ISI (Hz)")

figure;
histogram(ISIs,25)
xlabel("ISI (s)")
ylabel("Count")
title(sprintf("AELIF b=%.1d, sigma=%.1d, Imag=%.1d",b,sigma,Imag))

meanISI = mean(ISIs);
stdISI = std(ISIs);

coefVar = stdISI/meanISI


% Fano factor graph
wdwSizeAr = linspace(10e-3,1,1000);
fanoVals = zeros(size(wdwSizeAr));

for w = 1:numel(wdwSizeAr)

    wdwEdges = tvec(1) : wdwSizeAr(w) : tvec(end);
    numWdwSpks = zeros(1,numel(wdwEdges)-1); % To hold the number of spikes in each window
    
    for e = 1:numel(wdwEdges)-1
    
        numSpikes = sum(spikeTimes >= wdwEdges(e) & spikeTimes < wdwEdges(e+1));
        numWdwSpks(e) = numSpikes;
    end
    
    fanoF = var(numWdwSpks)/mean(numWdwSpks);
    fanoVals(w) = fanoF;

end

figure
plot(wdwSizeAr*1e3, fanoVals)
title(sprintf("Fano Factors of a White Noise Spiketrain \n AELIF b=%.1d, sigma=%.1d, Imag=%.1d",b,sigma,Imag))
xlabel("Window Size (ms)")
ylabel("Fano Factor")